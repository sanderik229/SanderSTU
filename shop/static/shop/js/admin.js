// Admin Dashboard JavaScript
class AdminDashboard {
    constructor() {
        this.currentSection = 'dashboard';
        this.charts = {};
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadDashboardData();
        this.initializeCharts();
        this.loadNotifications();
    }

    setupEventListeners() {
        // Navigation
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const section = item.dataset.section;
                this.navigateToSection(section);
            });
        });

        // User menu
        const userMenuBtn = document.querySelector('.user-menu-btn');
        const userDropdown = document.querySelector('.user-dropdown');
        
        if (userMenuBtn && userDropdown) {
            userMenuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                userDropdown.style.display = userDropdown.style.display === 'block' ? 'none' : 'block';
            });

            document.addEventListener('click', () => {
                userDropdown.style.display = 'none';
            });
        }

        // Logout
        const logoutBtn = document.getElementById('logoutAdmin');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.logout();
            });
        }
    }

    navigateToSection(section) {
        // Update navigation
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-section="${section}"]`).classList.add('active');

        // Update page title
        const titles = {
            dashboard: { title: '–î–∞—à–±–æ—Ä–¥', subtitle: '–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏' },
            services: { title: '–£—Å–ª—É–≥–∏', subtitle: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º —É—Å–ª—É–≥' },
            orders: { title: '–ó–∞–∫–∞–∑—ã', subtitle: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏' },
            users: { title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', subtitle: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏' },
            analytics: { title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', subtitle: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ' },
            reports: { title: '–û—Ç—á–µ—Ç—ã', subtitle: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤' },
            settings: { title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', subtitle: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã' }
        };

        const pageTitle = document.getElementById('page-title');
        const pageSubtitle = document.getElementById('page-subtitle');
        
        if (pageTitle && pageSubtitle && titles[section]) {
            pageTitle.textContent = titles[section].title;
            pageSubtitle.textContent = titles[section].subtitle;
        }

        this.currentSection = section;
        this.loadSectionContent(section);
    }

    loadSectionContent(section) {
        const content = document.getElementById('admin-content');
        
        switch (section) {
            case 'dashboard':
                this.loadDashboardContent();
                break;
            case 'services':
                this.loadServicesContent();
                break;
            case 'orders':
                this.loadOrdersContent();
                break;
            case 'users':
                this.loadUsersContent();
                break;
            case 'analytics':
                this.loadAnalyticsContent();
                break;
            case 'reports':
                this.loadReportsContent();
                break;
            case 'settings':
                this.loadSettingsContent();
                break;
        }
    }

    loadDashboardContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <!-- KPI Cards -->
            <div class="kpi-grid">
                <div class="kpi-card">
                    <div class="kpi-icon">üí∞</div>
                    <div class="kpi-content">
                        <h3>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</h3>
                        <div class="kpi-value" id="totalRevenue">0 ‚ÇΩ</div>
                        <div class="kpi-change positive">+12.5%</div>
                    </div>
                </div>
                <div class="kpi-card">
                    <div class="kpi-icon">üì¶</div>
                    <div class="kpi-content">
                        <h3>–ó–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü</h3>
                        <div class="kpi-value" id="monthlyOrders">0</div>
                        <div class="kpi-change positive">+8.2%</div>
                    </div>
                </div>
                <div class="kpi-card">
                    <div class="kpi-icon">üë•</div>
                    <div class="kpi-content">
                        <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <div class="kpi-value" id="activeUsers">0</div>
                        <div class="kpi-change positive">+15.3%</div>
                    </div>
                </div>
                <div class="kpi-card">
                    <div class="kpi-icon">üìä</div>
                    <div class="kpi-content">
                        <h3>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</h3>
                        <div class="kpi-value" id="averageOrder">0 ‚ÇΩ</div>
                        <div class="kpi-change negative">-2.1%</div>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="charts-row">
                <div class="chart-container">
                    <h3>–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
                    <canvas id="revenueChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏</h3>
                    <canvas id="servicesChart"></canvas>
                </div>
            </div>

            <!-- Recent Orders -->
            <div class="recent-section">
                <div class="section-header">
                    <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</h3>
                    <a href="#" onclick="openOrdersModal(); return false;" class="view-all">–í—Å–µ –∑–∞–∫–∞–∑—ã ‚Üí</a>
                </div>
                <div class="recent-orders" id="recentOrders">
                    <!-- Orders will be loaded here -->
                </div>
            </div>

            <!-- Notifications -->
            <div class="notifications-section">
                <div class="section-header">
                    <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                    <span class="notification-count" id="notificationCount">0</span>
                </div>
                <div class="notifications" id="notifications">
                    <!-- Notifications will be loaded here -->
                </div>
            </div>
        `;

        this.loadDashboardData();
        this.initializeCharts();
        this.loadRecentOrders();
        this.loadNotifications();
    }

    async loadDashboardData() {
        try {
            // Load KPI data
            const response = await fetch('/api/v2/admin/stats/', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                this.updateKPICards(data);
            } else if (response.status === 401) {
                // Try to refresh token
                try {
                    const refreshResponse = await this.refreshToken();
                    if (refreshResponse.access) {
                        this.setTokens(refreshResponse.access, refreshResponse.refresh);
                        const retryResponse = await fetch('/api/v2/admin/stats/', {
                            headers: this.getAuthHeaders()
                        });
                        if (retryResponse.ok) {
                            const data = await retryResponse.json();
                            this.updateKPICards(data);
                            return;
                        }
                    }
                } catch (refreshError) {
                    console.error('Token refresh failed:', refreshError);
                }
                
                // Fallback to mock data
                this.updateKPICards({
                    totalRevenue: 1250000,
                    monthlyOrders: 156,
                    activeUsers: 89,
                    averageOrder: 8012
                });
            } else {
                // Fallback to mock data
                this.updateKPICards({
                    totalRevenue: 1250000,
                    monthlyOrders: 156,
                    activeUsers: 89,
                    averageOrder: 8012
                });
            }
        } catch (error) {
            console.error('Error loading dashboard data:', error);
            // Use mock data
            this.updateKPICards({
                totalRevenue: 1250000,
                monthlyOrders: 156,
                activeUsers: 89,
                averageOrder: 8012
            });
        }
    }

    updateKPICards(data) {
        const totalRevenue = document.getElementById('totalRevenue');
        const monthlyOrders = document.getElementById('monthlyOrders');
        const activeUsers = document.getElementById('activeUsers');
        const averageOrder = document.getElementById('averageOrder');

        if (totalRevenue) totalRevenue.textContent = data.totalRevenue?.toLocaleString('ru-RU') + ' ‚ÇΩ' || '0 ‚ÇΩ';
        if (monthlyOrders) monthlyOrders.textContent = data.monthlyOrders || '0';
        if (activeUsers) activeUsers.textContent = data.activeUsers || '0';
        if (averageOrder) averageOrder.textContent = data.averageOrder?.toLocaleString('ru-RU') + ' ‚ÇΩ' || '0 ‚ÇΩ';
    }

    initializeCharts() {
        // Revenue Chart
        const revenueCtx = document.getElementById('revenueChart');
        if (revenueCtx) {
            this.charts.revenue = new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
                    datasets: [{
                        label: '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)',
                        data: [850000, 920000, 780000, 1100000, 1250000, 980000],
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                                }
                            }
                        }
                    }
                }
            });
        }

        // Services Chart
        const servicesCtx = document.getElementById('servicesChart');
        if (servicesCtx) {
            this.charts.services = new Chart(servicesCtx, {
                type: 'doughnut',
                data: {
                    labels: ['YouTube', 'Instagram', 'Telegram', 'TikTok', 'VK'],
                    datasets: [{
                        data: [35, 25, 20, 15, 5],
                        backgroundColor: [
                            '#ff6b6b',
                            '#4ecdc4',
                            '#45b7d1',
                            '#96ceb4',
                            '#feca57'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
    }

    async loadRecentOrders() {
        try {
            const response = await fetch('/api/v2/orders/?limit=5', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                const orders = data.results || data;
                this.renderRecentOrders(orders);
            } else {
                this.renderRecentOrders([]);
            }
        } catch (error) {
            console.error('Error loading recent orders:', error);
            this.renderRecentOrders([]);
        }
    }

    renderRecentOrders(orders) {
        const container = document.getElementById('recentOrders');
        if (!container) return;

        if (orders.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: #64748b; padding: 20px;">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
            return;
        }

        container.innerHTML = orders.map(order => `
            <div class="order-item">
                <div class="order-info">
                    <h4>–ó–∞–∫–∞–∑ #${order.id}</h4>
                    <p>${order.full_name || order.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Ä¢ ${new Date(order.created_at).toLocaleDateString('ru-RU')}</p>
                </div>
                <div class="order-status ${order.status}">${this.getStatusText(order.status)}</div>
            </div>
        `).join('');
    }

    getStatusText(status) {
        const statusMap = {
            'new': '–ù–æ–≤—ã–π',
            'paid': '–û–ø–ª–∞—á–µ–Ω',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'done': '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusMap[status] || status;
    }

    async loadNotifications() {
        // Mock notifications
        const notifications = [
            {
                icon: 'üì¶',
                title: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                message: '–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ #1234 –æ—Ç –ò–≤–∞–Ω–æ–≤ –ò.–ò.',
                time: '2 –º–∏–Ω –Ω–∞–∑–∞–¥'
            },
            {
                icon: 'üë§',
                title: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                message: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
                time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥'
            },
            {
                icon: '‚ö†Ô∏è',
                title: '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                time: '1 —á–∞—Å –Ω–∞–∑–∞–¥'
            }
        ];

        this.renderNotifications(notifications);
    }

    renderNotifications(notifications) {
        const container = document.getElementById('notifications');
        const count = document.getElementById('notificationCount');
        
        if (count) count.textContent = notifications.length;

        if (container) {
            container.innerHTML = notifications.map(notification => `
                <div class="notification-item">
                    <div class="notification-icon">${notification.icon}</div>
                    <div class="notification-content">
                        <h4>${notification.title}</h4>
                        <p>${notification.message} ‚Ä¢ ${notification.time}</p>
                    </div>
                </div>
            `).join('');
        }
    }

    loadServicesContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="services-section">
                <div class="section-header">
                    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h3>
                    <button class="btn btn-primary" onclick="adminDashboard.addService()">+ –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</button>
                </div>
                <div class="services-grid" id="servicesGrid">
                    <!-- Services will be loaded here -->
                </div>
            </div>
        `;
        this.loadServices();
    }

    loadOrdersContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="orders-section">
                <div class="section-header">
                    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h3>
                    <div class="filters">
                        <select id="statusFilter">
                            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                            <option value="new">–ù–æ–≤—ã–µ</option>
                            <option value="paid">–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ</option>
                            <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                            <option value="done">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</option>
                            <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ</option>
                        </select>
                    </div>
                </div>
                <div class="orders-table" id="ordersTable">
                    <!-- Orders will be loaded here -->
                </div>
            </div>
        `;
        this.loadOrders();
    }

    loadUsersContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="users-section">
                <div class="section-header">
                    <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
                    <button class="btn btn-primary">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
                </div>
                <div class="users-table" id="usersTable">
                    <!-- Users will be loaded here -->
                </div>
            </div>
        `;
        this.loadUsers();
    }

    loadAnalyticsContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="analytics-section">
                <div class="section-header">
                    <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="date-filters">
                        <select id="dateRange">
                            <option value="week">–ù–µ–¥–µ–ª—è</option>
                            <option value="month" selected>–ú–µ—Å—è—Ü</option>
                            <option value="quarter">–ö–≤–∞—Ä—Ç–∞–ª</option>
                            <option value="year">–ì–æ–¥</option>
                        </select>
                    </div>
                </div>
                <div class="analytics-grid">
                    <div class="chart-container">
                        <h3>–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</h3>
                        <canvas id="salesChart"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
                        <canvas id="categoriesChart"></canvas>
                    </div>
                </div>
            </div>
        `;
        this.loadAnalytics();
    }

    loadReportsContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="reports-section">
                <div class="section-header">
                    <h3>–û—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç</h3>
                </div>
                <div class="reports-grid">
                    <div class="report-card">
                        <h4>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</h4>
                        <p>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∑–∞–∫–∞–∑–∞–º</p>
                        <button class="btn btn-primary" onclick="adminDashboard.generateReport('monthly')">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF</button>
                    </div>
                    <div class="report-card">
                        <h4>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤</h4>
                        <p>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ Excel</p>
                        <button class="btn btn-secondary" onclick="adminDashboard.exportOrders('excel')">–≠–∫—Å–ø–æ—Ä—Ç Excel</button>
                    </div>
                    <div class="report-card">
                        <h4>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4>
                        <p>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV</p>
                        <button class="btn btn-secondary" onclick="adminDashboard.exportUsers('csv')">–≠–∫—Å–ø–æ—Ä—Ç CSV</button>
                    </div>
                </div>
            </div>
        `;
    }

    loadSettingsContent() {
        const content = document.getElementById('admin-content');
        content.innerHTML = `
            <div class="settings-section">
                <div class="section-header">
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
                </div>
                <div class="settings-grid">
                    <div class="setting-card">
                        <h4>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                        <form>
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
                            <input type="text" value="SanderStu" />
                            <label>Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</label>
                            <input type="email" value="admin@sanderstu.com" />
                            <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </form>
                    </div>
                    <div class="setting-card">
                        <h4>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h4>
                        <div class="theme-options">
                            <button class="theme-btn active" data-theme="light">–°–≤–µ—Ç–ª–∞—è</button>
                            <button class="theme-btn" data-theme="dark">–¢–µ–º–Ω–∞—è</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        this.setupThemeToggle();
    }

    setupThemeToggle() {
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.theme-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                const theme = btn.dataset.theme;
                document.body.classList.toggle('dark', theme === 'dark');
                localStorage.setItem('admin-theme', theme);
            });
        });

        // Load saved theme
        const savedTheme = localStorage.getItem('admin-theme');
        if (savedTheme === 'dark') {
            document.body.classList.add('dark');
            document.querySelector('[data-theme="dark"]')?.classList.add('active');
        }
    }

    async loadServices() {
        // Mock services data
        const services = [
            { id: 1, name: 'YouTube —Ä–µ–∫–ª–∞–º–∞', price: 50000, status: 'active', orders: 15 },
            { id: 2, name: 'Instagram Stories', price: 25000, status: 'active', orders: 23 },
            { id: 3, name: 'Telegram –∫–∞–Ω–∞–ª', price: 30000, status: 'inactive', orders: 8 }
        ];

        this.renderServices(services);
    }

    renderServices(services) {
        const container = document.getElementById('servicesGrid');
        if (!container) return;

        container.innerHTML = services.map(service => `
            <div class="service-card">
                <div class="service-header">
                    <h4>${service.name}</h4>
                    <span class="service-status ${service.status}">${service.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}</span>
                </div>
                <div class="service-info">
                    <p>–¶–µ–Ω–∞: ${service.price.toLocaleString('ru-RU')} ‚ÇΩ</p>
                    <p>–ó–∞–∫–∞–∑–æ–≤: ${service.orders}</p>
                </div>
                <div class="service-actions">
                    <button class="btn btn-sm" onclick="adminDashboard.editService(${service.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn btn-sm btn-danger" onclick="adminDashboard.deleteService(${service.id})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');
    }

    async loadOrders() {
        try {
            const response = await fetch('/api/v2/admin/orders/', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                const orders = data.results || data;
                this.renderOrders(orders);
            } else if (response.status === 401) {
                // Try to refresh token
                try {
                    const refreshResponse = await this.refreshToken();
                    if (refreshResponse.access) {
                        this.setTokens(refreshResponse.access, refreshResponse.refresh);
                        const retryResponse = await fetch('/api/v2/admin/orders/', {
                            headers: this.getAuthHeaders()
                        });
                        if (retryResponse.ok) {
                            const data = await retryResponse.json();
                            const orders = data.results || data;
                            this.renderOrders(orders);
                        }
                    }
                } catch (refreshError) {
                    console.error('Token refresh failed:', refreshError);
                }
            }
        } catch (error) {
            console.error('Error loading orders:', error);
        }
    }

    renderOrders(orders) {
        const container = document.getElementById('ordersTable');
        if (!container) return;

        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ö–ª–∏–µ–Ω—Ç</th>
                        <th>–£—Å–ª—É–≥–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${orders.map(order => `
                        <tr>
                            <td>#${order.id}</td>
                            <td>${order.full_name || order.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${order.offer?.title || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑'}</td>
                            <td><span class="status-badge ${order.status}">${this.getStatusText(order.status)}</span></td>
                            <td>${new Date(order.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-sm" onclick="adminDashboard.viewOrder(${order.id})">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                                <button class="btn btn-sm" onclick="adminDashboard.updateOrderStatus(${order.id})">–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    async loadUsers() {
        try {
            const response = await fetch('/api/v2/admin/users/', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                const users = data.results || data;
                this.renderUsers(users);
            } else if (response.status === 401) {
                // Try to refresh token
                try {
                    const refreshResponse = await this.refreshToken();
                    if (refreshResponse.access) {
                        this.setTokens(refreshResponse.access, refreshResponse.refresh);
                        const retryResponse = await fetch('/api/v2/admin/users/', {
                            headers: this.getAuthHeaders()
                        });
                        if (retryResponse.ok) {
                            const data = await retryResponse.json();
                            const users = data.results || data;
                            this.renderUsers(users);
                        }
                    }
                } catch (refreshError) {
                    console.error('Token refresh failed:', refreshError);
                }
            }
        } catch (error) {
            console.error('Error loading users:', error);
        }
    }

    renderUsers(users) {
        const container = document.getElementById('usersTable');
        if (!container) return;

        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ò–º—è</th>
                        <th>Email</th>
                        <th>–†–æ–ª—å</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.id}</td>
                            <td>${user.profile?.full_name || user.username}</td>
                            <td>${user.email}</td>
                            <td>${user.profile?.role || 'user'}</td>
                            <td><span class="status-badge ${user.is_active ? 'active' : 'inactive'}">${user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}</span></td>
                            <td>${new Date(user.date_joined).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-sm" onclick="adminDashboard.editUser(${user.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button class="btn btn-sm ${user.is_active ? 'btn-danger' : 'btn-success'}" onclick="adminDashboard.toggleUserStatus(${user.id})">
                                    ${user.is_active ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    loadAnalytics() {
        // Initialize analytics charts
        setTimeout(() => {
            this.initializeAnalyticsCharts();
        }, 100);
    }

    initializeAnalyticsCharts() {
        // Sales Chart
        const salesCtx = document.getElementById('salesChart');
        if (salesCtx) {
            new Chart(salesCtx, {
                type: 'bar',
                data: {
                    labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
                    datasets: [{
                        label: '–ü—Ä–æ–¥–∞–∂–∏',
                        data: [120000, 150000, 180000, 200000, 160000, 140000, 110000],
                        backgroundColor: '#3b82f6'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Categories Chart
        const categoriesCtx = document.getElementById('categoriesChart');
        if (categoriesCtx) {
            new Chart(categoriesCtx, {
                type: 'pie',
                data: {
                    labels: ['YouTube', 'Instagram', 'Telegram', 'TikTok'],
                    datasets: [{
                        data: [40, 30, 20, 10],
                        backgroundColor: ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }
    }

    // Utility methods
    getAuthHeaders() {
        const token = localStorage.getItem('access');
        return {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
    }

    setTokens(access, refresh) {
        localStorage.setItem('access', access);
        if (refresh) {
            localStorage.setItem('refresh', refresh);
        }
    }

    async refreshToken() {
        const refreshToken = localStorage.getItem('refresh');
        if (!refreshToken) {
            throw new Error('No refresh token available');
        }

        const response = await fetch('/api/v2/auth/refresh/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                refresh: refreshToken
            })
        });

        if (!response.ok) {
            throw new Error('Token refresh failed');
        }

        return await response.json();
    }

    showToast(message, type = 'info') {
        const toast = document.getElementById('adminToast');
        if (toast) {
            toast.textContent = message;
            toast.className = `admin-toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
    }

    logout() {
        localStorage.removeItem('access');
        localStorage.removeItem('refresh');
        localStorage.removeItem('userEmail');
        localStorage.removeItem('userFullName');
        window.location.href = '/';
    }

    // Action methods
    async addService() {
        const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        if (!title) return;
        
        const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        const price = prompt('–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏:');
        if (!price || isNaN(price)) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', 'error');
            return;
        }
        
        const social_network = prompt('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:');

        try {
            const response = await fetch('/api/v2/admin/services/create/', {
                method: 'POST',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({
                    title: title,
                    description: description || '',
                    price: parseFloat(price),
                    social_network: social_network || ''
                })
            });

            if (response.ok) {
                this.showToast('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadServices(); // Refresh services list
            } else {
                const error = await response.json();
                this.showToast('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + error.detail, 'error');
            }
        } catch (error) {
            console.error('Error adding service:', error);
            this.showToast('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏', 'error');
        }
    }

    async editService(id) {
        const title = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        if (!title) return;
        
        const description = prompt('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        const price = prompt('–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏:');
        if (!price || isNaN(price)) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', 'error');
            return;
        }
        
        const social_network = prompt('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:');
        const is_active = confirm('–£—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞?');

        try {
            const response = await fetch(`/api/v2/admin/services/${id}/update/`, {
                method: 'PUT',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({
                    title: title,
                    description: description || '',
                    price: parseFloat(price),
                    social_network: social_network || '',
                    is_active: is_active
                })
            });

            if (response.ok) {
                this.showToast('–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadServices(); // Refresh services list
            } else {
                const error = await response.json();
                this.showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + error.detail, 'error');
            }
        } catch (error) {
            console.error('Error updating service:', error);
            this.showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏', 'error');
        }
    }

    async deleteService(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) {
            return;
        }

        try {
            const response = await fetch(`/api/v2/admin/services/${id}/delete/`, {
                method: 'DELETE',
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                this.showToast('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadServices(); // Refresh services list
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏', 'error');
            }
        } catch (error) {
            console.error('Error deleting service:', error);
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏', 'error');
        }
    }

    viewOrder(id) {
        this.showToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ #${id}`, 'info');
    }

    updateOrderStatus(id) {
        this.showToast(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${id}`, 'info');
    }

    async editUser(id) {
        const email = prompt('–ù–æ–≤—ã–π email:');
        if (!email) return;
        
        const full_name = prompt('–ù–æ–≤–æ–µ –§–ò–û:');
        const password = prompt('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):');
        const role = prompt('–†–æ–ª—å (user/admin):') || 'user';

        try {
            const response = await fetch(`/api/v2/admin/users/${id}/update/`, {
                method: 'PUT',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({
                    email: email,
                    full_name: full_name || '',
                    password: password || '',
                    role: role
                })
            });

            if (response.ok) {
                this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadUsers(); // Refresh users list
            } else {
                const error = await response.json();
                this.showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.detail, 'error');
            }
        } catch (error) {
            console.error('Error updating user:', error);
            this.showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    }

    async deleteUser(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            return;
        }

        try {
            const response = await fetch(`/api/v2/admin/users/${id}/delete/`, {
                method: 'DELETE',
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadUsers(); // Refresh users list
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    }

    async addUser() {
        const email = prompt('Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        if (!email) return;
        
        const password = prompt('–ü–∞—Ä–æ–ª—å:');
        if (!password) {
            this.showToast('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error');
            return;
        }
        
        const full_name = prompt('–§–ò–û:');
        const role = prompt('–†–æ–ª—å (user/admin):') || 'user';

        try {
            const response = await fetch('/api/v2/admin/users/create/', {
                method: 'POST',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({
                    email: email,
                    password: password,
                    full_name: full_name || '',
                    role: role
                })
            });

            if (response.ok) {
                this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadUsers(); // Refresh users list
            } else {
                const error = await response.json();
                this.showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.detail, 'error');
            }
        } catch (error) {
            console.error('Error creating user:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    }

    generateReport(type) {
        this.showToast(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: ${type}`, 'info');
    }

    async exportOrders(format) {
        try {
            const response = await fetch('/api/v2/admin/export/orders/csv/', {
                headers: this.getAuthHeaders()
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'orders.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                this.showToast('–ó–∞–∫–∞–∑—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV', 'success');
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤', 'error');
            }
        } catch (error) {
            console.error('Export error:', error);
            this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤', 'error');
        }
    }

    async exportUsers(format) {
        try {
            const response = await fetch('/api/v2/admin/export/users/csv/', {
                headers: this.getAuthHeaders()
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'users.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                this.showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV', 'success');
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
            }
        } catch (error) {
            console.error('Export error:', error);
            this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
        }
    }

    async exportServices(format) {
        try {
            const response = await fetch('/api/v2/admin/export/services/csv/', {
                headers: this.getAuthHeaders()
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'services.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                this.showToast('–£—Å–ª—É–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV', 'success');
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å–ª—É–≥', 'error');
            }
        } catch (error) {
            console.error('Export error:', error);
            this.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å–ª—É–≥', 'error');
        }
    }

    async generateMonthlyReport() {
        try {
            const response = await fetch('/api/v2/admin/reports/monthly/', {
                headers: this.getAuthHeaders()
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'monthly_report.json';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                this.showToast('–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'success');
            } else {
                this.showToast('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
            }
        } catch (error) {
            console.error('Report generation error:', error);
            this.showToast('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
        }
    }

    // Modal management
    openOrdersModal() {
        const modal = document.getElementById('ordersModal');
        if (modal) {
            modal.style.display = 'block';
            this.loadAllOrders();
        }
    }

    closeOrdersModal() {
        const modal = document.getElementById('ordersModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    async loadAllOrders() {
        try {
            const response = await fetch('/api/v2/admin/orders/', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                const orders = data.results || data;
                this.renderOrdersTable(orders);
            }
        } catch (error) {
            console.error('Error loading orders:', error);
        }
    }

    renderOrdersTable(orders) {
        const container = document.getElementById('ordersTableContainer');
        if (!container) return;

        const statusMap = {
            'new': {text: '–ù–æ–≤—ã–π', class: 'new'},
            'paid': {text: '–û–ø–ª–∞—á–µ–Ω', class: 'paid'},
            'in_progress': {text: '–í —Ä–∞–±–æ—Ç–µ', class: 'in_progress'},
            'done': {text: '–í—ã–ø–æ–ª–Ω–µ–Ω', class: 'done'},
            'cancelled': {text: '–û—Ç–º–µ–Ω–µ–Ω', class: 'cancelled'}
        };

        container.innerHTML = `
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ö–ª–∏–µ–Ω—Ç</th>
                        <th>Email</th>
                        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                        <th>–£—Å–ª—É–≥–∞</th>
                        <th>–¶–µ–Ω–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${orders.map(order => `
                        <tr>
                            <td>#${order.id}</td>
                            <td>${order.full_name || order.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${order.email || order.user?.email || ''}</td>
                            <td>${order.phone || ''}</td>
                            <td>${order.offer?.title || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑'}</td>
                            <td>${order.offer?.price ? order.offer.price.toLocaleString('ru-RU') + ' ‚ÇΩ' : '-'}</td>
                            <td><span class="status-badge ${order.status}">${statusMap[order.status]?.text || order.status}</span></td>
                            <td>${new Date(order.created_at).toLocaleDateString('ru-RU')}</td>
                            <td>
                                <button class="btn btn-sm" onclick="adminDashboard.changeOrderStatus(${order.id}, '${order.status}')">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                <button class="btn btn-sm btn-danger" onclick="adminDashboard.deleteOrder(${order.id})">–£–¥–∞–ª–∏—Ç—å</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    changeOrderStatus(id, currentStatus) {
        const statusModal = document.getElementById('statusModal');
        const orderIdInput = document.getElementById('statusOrderId');
        const statusSelect = document.getElementById('newStatus');
        
        if (statusModal && orderIdInput && statusSelect) {
            orderIdInput.value = id;
            statusSelect.value = currentStatus;
            statusModal.style.display = 'block';
        }
    }

    closeStatusModal() {
        const modal = document.getElementById('statusModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    async saveStatusChange() {
        const orderId = document.getElementById('statusOrderId').value;
        const newStatus = document.getElementById('newStatus').value;

        try {
            const response = await fetch(`/api/v2/admin/orders/${orderId}/status/`, {
                method: 'POST',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({status: newStatus})
            });

            if (response.ok) {
                this.showToast('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.closeStatusModal();
                this.loadAllOrders(); // Refresh orders
            } else {
                const error = await response.json();
                this.showToast('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.detail, 'error');
            }
        } catch (error) {
            console.error('Error updating status:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    }

    async deleteOrder(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
            return;
        }

        try {
            const response = await fetch(`/api/v2/admin/orders/${id}/delete/`, {
                method: 'DELETE',
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                this.showToast('–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadAllOrders(); // Refresh orders
            } else {
                this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error');
            }
        } catch (error) {
            console.error('Error deleting order:', error);
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error');
        }
    }
}

// Global functions for modal management
function openOrdersModal() {
    window.adminDashboard.openOrdersModal();
}

function closeOrdersModal() {
    window.adminDashboard.closeOrdersModal();
}

function closeStatusModal() {
    window.adminDashboard.closeStatusModal();
}

// Initialize admin dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.adminDashboard = new AdminDashboard();
    
    // Setup status change form
    const statusForm = document.getElementById('statusChangeForm');
    if (statusForm) {
        statusForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            await window.adminDashboard.saveStatusChange();
        });
    }
});
